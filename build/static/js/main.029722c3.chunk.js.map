{"version":3,"sources":["Header.js","Quantity.js","Items.js","AddItemForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","defaultProps","Quantity","index","quantity","changeQuantity","isEnabled","className","disabled","onClick","Items","_this$props","this","props","name","id","isCompleted","removeItem","completeItem","style","textDecorationLine","src_Quantity","PureComponent","AddItemForm","state","value","handleValueChange","e","_this","setState","target","handleSubmit","preventDefault","addItem","console","log","onSubmit","type","onChange","placeholder","Component","App","items","prevItemId","handleRemoveItem","prevState","filter","p","handleAddItem","concat","Object","toConsumableArray","handleCompleteItem","handleQuantityChange","delta","_this2","src_Header","src_AddItemForm","map","item","src_Items","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.029722c3.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst Header = ({title}) => {\n  return (\n    <header>\n      <h1>{title}</h1>\n    </header>\n  );\n}\nHeader.propTypes = {\n  title : PropTypes.string\n}\nHeader.defaultProps = {\n  title: \"Grocery List\"\n}\n\nexport default Header; ","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst Quantity = ({index, quantity, changeQuantity}) => {\n  const isEnabled = quantity >0;\n    return (\n      <div className=\"counter\">\n        <button className=\"counter-action decrement\" disabled={!isEnabled} onClick={()=>changeQuantity(index, -1)} > - </button>\n        <span className=\"counter-quantity\">{ quantity }</span>\n        <button className=\"counter-action increment\" onClick={()=>changeQuantity(index, +1)}> + </button>\n      </div>\n    );\n\n}\nQuantity.propTypes = {\n  index: PropTypes.number,\n  quantity: PropTypes.number,\n  changeQuantity: PropTypes.func,\n}\n  \nexport default Quantity;","import React, { PureComponent } from \"react\"\nimport PropTypes from \"prop-types\"\nimport Quantity from './Quantity'\n\n\nclass Items extends PureComponent {\n  static propTypes = {\n    changeQuantity: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    quantity: PropTypes.number.isRequired,\n    id: PropTypes.number,\n    index: PropTypes.number,\n    isCompleted: PropTypes.bool,\n  }\n  render(){\n    const {\n      name,\n      id,\n      quantity,\n      index,\n      isCompleted,\n      changeQuantity,\n      removeItem,\n      completeItem,\n    } = this.props\n    return(\n      <div className=\"item\">\n        <span className=\"item-name\" >\n        <button className=\"complete-item\" onClick={() => completeItem(index, isCompleted)}>✔</button>\n        <button className=\"remove-item\" onClick={() => removeItem(id)}>✖</button>\n          { !isCompleted ? <span>{name}</span>  :  <span style={{ textDecorationLine: 'line-through' }}>{name}</span> }\n        </span>\n        <Quantity \n        quantity = { quantity }\n        index = {index}\n        changeQuantity = {changeQuantity} />\n      </div>\n    )\n  };\n}\nexport default Items;","import React, { Component } from \"react\";\n\nclass AddItemForm extends Component {\n\n  state = {\n    value: \"\"\n  };\n  handleValueChange = (e) => {\n    this.setState({value : e.target.value }); \n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addItem(this.state.value);\n    this.setState({value: \"\"});\n  }\n\n  render(){\n    console.log(this.state.value)\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type= \"text\"\n          value= {this.state.value}\n          onChange={this.handleValueChange}\n          placeholder= \"Enter an item\"\n        />\n        <input\n          type=\"submit\"\n          value = \"Add Item\"\n          disabled = {!this.state.value}\n        />\n      </form>\n    )\n  }\n}\nexport default AddItemForm;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport Items from \"./Items\";\nimport AddItemForm from \"./AddItemForm\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    items: [],\n  }\n  prevItemId = 0\n\n  handleRemoveItem = (id) => {\n    this.setState( prevState => {\n      return {\n        items: prevState.items.filter(p => p.id !== id)\n      };\n    });\n  }\n  handleAddItem = (name) => {\n    this.setState( prevState => {\n      return {\n        items: [\n          ...prevState.items,\n          {\n            name,\n            quantity: 1,\n            id: this.prevItemId+=1,\n            isCompleted : false,\n          }\n        ]\n      };\n    })\n  }\n  handleCompleteItem = (index, isCompleted) =>{\n    this.setState( prevState => ({\n      isCompleted : prevState.items[index].isCompleted = !isCompleted\n    }));\n  }\n\n  handleQuantityChange = (index, delta) => {\n    this.setState( prevState => ({\n      quantity: prevState.items[index].quantity += delta\n    }));\n  \n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <Header />\n       <AddItemForm addItem = {this.handleAddItem}/>\n\n       {this.state.items.map( (item, index) =>\n          <Items\n            name={item.name}\n            quantity={item.quantity}\n            id={item.id}\n            key={item.id.toString()} \n            index={index}\n            isCompleted = {item.isCompleted}\n            changeQuantity={this.handleQuantityChange}   \n            removeItem= {this.handleRemoveItem}\n            completeItem = {this.handleCompleteItem}            \n          />\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}